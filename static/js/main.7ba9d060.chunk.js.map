{"version":3,"sources":["components/Header.js","components/Resume.js","components/Projects.js","components/HomePage.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","to","className","Nav","replace","NavDropdown","title","id","Item","href","Divider","Resume","Container","Jumbotron","Card","Image","src","fluid","Component","Projects","HomePage","Tab","defaultActiveKey","Row","Col","sm","Link","eventKey","Content","Pane","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ba9d060.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Navbar, Nav, NavDropdown} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Header(){\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\" >\r\n            \r\n            <Link to={\"/portfolio\"} className=\"navbar-brand\">\r\n                \r\n                    Home\r\n\r\n            </Link>\r\n            <Nav className=\"mr-auto\">\r\n                \r\n                <Link to={\"/projects\"}  replace className=\"nav-link\">Projects</Link>\r\n                <NavDropdown title=\"Use this to nav to different projects\" id=\"collasible-nav-dropdown\">\r\n                    {/* should link to samee page, but different spots */}\r\n                    <NavDropdown.Item href=\"#action/3.1\">Projects</NavDropdown.Item>\r\n                    <NavDropdown.Divider />\r\n                    <NavDropdown.Item href=\"#action/3.1\">SongSpots</NavDropdown.Item>\r\n                    <NavDropdown.Item href=\"#action/3.2\">TopMusic</NavDropdown.Item>\r\n                </NavDropdown>\r\n                <Link to={\"/resume\"} replace className=\"nav-link\">Full Resume</Link>\r\n            </Nav>\r\n            \r\n        </Navbar>\r\n    )\r\n}","import React, {Component} from 'react';\r\nimport {Card, Container, Jumbotron, Image, Col} from 'react-bootstrap';\r\nimport '../App.css'\r\n\r\nexport default class Resume extends Component{\r\n\r\n    \r\n    \r\n\r\n    render(){\r\n        return (\r\n            <Container>\r\n                <Jumbotron className=\"text-center\">\r\n                    {/* will want to reduce the size of the resume image eventually */}\r\n                        <Card>\r\n                            <Image src=\"https://raw.githubusercontent.com/pcassioppi/pages_files/gh-pages/resume/ResumeJPEG.jpg\" fluid/>\r\n                        </Card>\r\n                        \r\n                </Jumbotron>\r\n            \r\n            </Container>\r\n        );\r\n    \r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Card, Container, Jumbotron, Col} from 'react-bootstrap';\r\nimport '../App.css'\r\n\r\nexport default class Projects extends Component{\r\n\r\n    \r\n    \r\n\r\n    render(){\r\n        return (\r\n            <Container>\r\n                <Jumbotron className=\"text-center\">\r\n                        <h1>Portfolio Test - PROJECTS</h1>\r\n                </Jumbotron>\r\n            \r\n            </Container>\r\n        );\r\n    \r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Card, Container, Jumbotron, Col, Row, Tab, Nav, NavDropdown} from 'react-bootstrap';\r\nimport '../App.css'\r\nimport Resume from './Resume'\r\nimport Projects from './Projects'\r\n\r\nexport default class HomePage extends Component{\r\n\r\n    \r\n    \r\n\r\n    render(){\r\n        return (\r\n            <Container>\r\n                <Jumbotron className=\"text-center\">\r\n                        <h1>Portfolio Test</h1>        \r\n                </Jumbotron>\r\n                <Tab.Container defaultActiveKey=\"first\">\r\n                    <Row>\r\n                        <Col sm={3}>\r\n                        <Card>\r\n                        <Nav variant=\"tabs\" className=\"flex-column\">\r\n                            <Nav.Item>\r\n                            <Nav.Link eventKey=\"first\">Resume</Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                            <Nav.Link eventKey=\"second\">Projects</Nav.Link>\r\n                            </Nav.Item>\r\n                            <NavDropdown title=\"Projects\" id=\"collasible-nav-dropdown\">\r\n                                {/* should link to samee page, but different spots */}\r\n                                <NavDropdown.Item href=\"#action/3.1\">Projects</NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                                <NavDropdown.Item href=\"#action/3.1\">SongSpots</NavDropdown.Item>\r\n                                <NavDropdown.Item href=\"#action/3.2\">TopMusic</NavDropdown.Item>\r\n                            </NavDropdown>\r\n                        </Nav>\r\n                        </Card>\r\n                        </Col>\r\n                        <Col sm={9}>\r\n                        <Card>\r\n                        <Tab.Content>\r\n                            <Tab.Pane eventKey=\"first\">\r\n                            <Resume />\r\n                            </Tab.Pane>\r\n                            <Tab.Pane eventKey=\"second\">\r\n                            <Projects/>\r\n                            </Tab.Pane>\r\n                        </Tab.Content>\r\n                        </Card>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                </Tab.Container>\r\n            </Container>\r\n        );\r\n    \r\n    }\r\n}","import React from 'react';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom'\n\nimport Header from './Header'\nimport HomePage from './HomePage'\nimport Resume from './Resume'\nimport Projects from './Projects'\n// import './App.css';\n\nconst App = () => (\n  <div className=\"center w85\">\n    <Router>\n      <Header />\n      <div className=\"ph3 pv1 background-gray\">\n        <Switch>\n          <Route exact path=\"/portfolio\" component={HomePage} />\n          <Route exact path=\"/resume\" component={Resume} />\n          <Route exact path=\"/projects\" component={Projects} />\n\n        </Switch>\n      </div>\n    </Router>\n  </div>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}